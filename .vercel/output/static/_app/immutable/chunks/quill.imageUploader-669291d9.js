import{Q as o}from"./quill-f76e77fe.js";const d=o.import("blots/block");class a extends d{static create(e){const t=super.create(e);if(e===!0)return t;const i=document.createElement("img");return i.setAttribute("src",e),t.appendChild(i),t}deleteAt(e,t){super.deleteAt(e,t),this.cache={}}static value(e){const{src:t,custom:i}=e.dataset;return{src:t,custom:i}}}a.blotName="imageBlot";a.className="image-uploading";a.tagName="span";o.register({"formats/imageBlot":a});class c{constructor(e,t){this.quill=e,this.options=t,this.range=null,typeof this.options.upload!="function"&&console.warn("[Missing config] upload function that returns a promise is required");var i=this.quill.getModule("toolbar");i.addHandler("image",this.selectLocalImage.bind(this)),this.handleDrop=this.handleDrop.bind(this),this.handlePaste=this.handlePaste.bind(this),this.quill.root.addEventListener("drop",this.handleDrop,!1),this.quill.root.addEventListener("paste",this.handlePaste,!1)}selectLocalImage(){this.quill.focus(),this.range=this.quill.getSelection(),this.fileHolder=document.createElement("input"),this.fileHolder.setAttribute("type","file"),this.fileHolder.setAttribute("accept","image/*"),this.fileHolder.setAttribute("style","visibility:hidden"),this.fileHolder.onchange=this.fileChanged.bind(this),document.body.appendChild(this.fileHolder),this.fileHolder.click(),window.requestAnimationFrame(()=>{document.body.removeChild(this.fileHolder)})}handleDrop(e){if(e.stopPropagation(),e.preventDefault(),e.dataTransfer&&e.dataTransfer.files&&e.dataTransfer.files.length){if(document.caretRangeFromPoint){const i=document.getSelection(),s=document.caretRangeFromPoint(e.clientX,e.clientY);i&&s&&i.setBaseAndExtent(s.startContainer,s.startOffset,s.startContainer,s.startOffset)}else{const i=document.getSelection(),s=document.caretPositionFromPoint(e.clientX,e.clientY);i&&s&&i.setBaseAndExtent(s.offsetNode,s.offset,s.offsetNode,s.offset)}this.quill.focus(),this.range=this.quill.getSelection();let t=e.dataTransfer.files[0];setTimeout(()=>{this.quill.focus(),this.range=this.quill.getSelection(),this.readAndUploadFile(t)},0)}}handlePaste(e){let t=e.clipboardData||window.clipboardData;if(t&&(t.items||t.files)){let i=t.items||t.files;const s=/^image\/(jpe?g|gif|png|svg|webp)$/i;for(let l=0;l<i.length;l++)if(s.test(i[l].type)){let n=i[l].getAsFile?i[l].getAsFile():i[l];n&&(this.quill.focus(),this.range=this.quill.getSelection(),e.preventDefault(),setTimeout(()=>{this.quill.focus(),this.range=this.quill.getSelection(),this.readAndUploadFile(n)},0))}}}readAndUploadFile(e){let t=!1;const i=new FileReader;i.addEventListener("load",()=>{if(!t){let s=i.result;this.insertBase64Image(s)}},!1),e&&i.readAsDataURL(e),this.options.upload(e).then(s=>{this.insertToEditor(s)},s=>{t=!0,this.removeBase64Image(),console.warn(s)})}fileChanged(){const e=this.fileHolder.files[0];this.readAndUploadFile(e)}insertBase64Image(e){const t=this.range;this.quill.insertEmbed(t.index,a.blotName,`${e}`,"user")}insertToEditor(e){const t=this.range;this.quill.deleteText(t.index,3,"user"),this.quill.insertEmbed(t.index,"image",`${e}`,"user"),t.index++,this.quill.setSelection(t,"user")}removeBase64Image(){const e=this.range;this.quill.deleteText(e.index,3,"user")}}window.ImageUploader=c;export{c as default};
